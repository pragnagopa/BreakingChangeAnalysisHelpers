let subId = "{subid}";
let referencesRemovedReferencesFromSharedFx3_1 = dynamic (
[
"microsoft.aspnetcore",
"microsoft.aspnetcore.authentication",
"microsoft.aspnetcore.authentication.facebook",
"microsoft.aspnetcore.authentication.google",
"microsoft.aspnetcore.authentication.jwtbearer",
"microsoft.aspnetcore.authentication.microsoftaccount",
"microsoft.aspnetcore.authentication.openidconnect",
"microsoft.aspnetcore.authentication.twitter",
"microsoft.aspnetcore.authentication.wsfederation",
"microsoft.aspnetcore.diagnostics",
"microsoft.aspnetcore.diagnostics.entityframeworkcore",
"microsoft.aspnetcore.identity",
"microsoft.aspnetcore.identity.ui",
"microsoft.aspnetcore.identity.ui.views",
"microsoft.aspnetcore.jsonpatch",
"microsoft.aspnetcore.middlewareanalysis",
"microsoft.aspnetcore.mvc",
"microsoft.aspnetcore.mvc.razor",
"microsoft.aspnetcore.nodeservices",
"microsoft.aspnetcore.owin",
"microsoft.aspnetcore.razor",
"microsoft.aspnetcore.server.kestrel",
"microsoft.aspnetcore.server.kestrel.https",
"microsoft.aspnetcore.server.kestrel.transport.abstractions",
"microsoft.aspnetcore.spaservices",
"microsoft.aspnetcore.spaservices.extensions",
"microsoft.extensions.caching.sqlserver",
"microsoft.extensions.diagnosticadapter",
"microsoft.identitymodel.protocols.wsfederation",
"microsoft.identitymodel.tokens.saml",
"microsoft.identitymodel.xml",
"newtonsoft.json",
"system.net.websockets.websocketprotocol",
"system.text.encoding.codepages",
"system.threading.channels"
]
);
let referencesNotRemoved = dynamic (
[
"microsoft.aspnetcore.antiforgery",
"microsoft.aspnetcore.authentication.abstractions",
"microsoft.aspnetcore.authentication.cookies",
"microsoft.aspnetcore.authentication.core",
"microsoft.aspnetcore.authentication.oauth",
"microsoft.aspnetcore.authorization",
"microsoft.aspnetcore.authorization.policy",
"microsoft.aspnetcore.buffering",
"microsoft.aspnetcore.connections.abstractions",
"microsoft.aspnetcore.cookiepolicy",
"microsoft.aspnetcore.cors",
"microsoft.aspnetcore.cryptography.internal",
"microsoft.aspnetcore.cryptography.keyderivation",
"microsoft.aspnetcore.dataprotection",
"microsoft.aspnetcore.dataprotection.abstractions",
"microsoft.aspnetcore.dataprotection.extensions",
"microsoft.aspnetcore.diagnostics.abstractions",
"microsoft.aspnetcore.hostfiltering",
"microsoft.aspnetcore.hosting",
"microsoft.aspnetcore.hosting.abstractions",
"microsoft.aspnetcore.hosting.server.abstractions",
"microsoft.aspnetcore.html.abstractions",
"microsoft.aspnetcore.http",
"microsoft.aspnetcore.http.abstractions",
"microsoft.aspnetcore.http.connections",
"microsoft.aspnetcore.http.connections.common",
"microsoft.aspnetcore.http.extensions",
"microsoft.aspnetcore.http.features",
"microsoft.aspnetcore.httpoverrides",
"microsoft.aspnetcore.httpspolicy",
"microsoft.aspnetcore.localization",
"microsoft.aspnetcore.localization.routing",
"microsoft.aspnetcore.mvc.abstractions",
"microsoft.aspnetcore.mvc.apiexplorer",
"microsoft.aspnetcore.mvc.core",
"microsoft.aspnetcore.mvc.cors",
"microsoft.aspnetcore.mvc.dataannotations",
"microsoft.aspnetcore.mvc.formatters.json",
"microsoft.aspnetcore.mvc.formatters.xml",
"microsoft.aspnetcore.mvc.localization",
"microsoft.aspnetcore.mvc.razorpages",
"microsoft.aspnetcore.mvc.taghelpers",
"microsoft.aspnetcore.mvc.viewfeatures",
"microsoft.aspnetcore.razor.runtime",
"microsoft.aspnetcore.responsecaching",
"microsoft.aspnetcore.responsecaching.abstractions",
"microsoft.aspnetcore.responsecompression",
"microsoft.aspnetcore.rewrite",
"microsoft.aspnetcore.routing",
"microsoft.aspnetcore.routing.abstractions",
"microsoft.aspnetcore.server.httpsys",
"microsoft.aspnetcore.server.iisintegration",
"microsoft.aspnetcore.server.kestrel.core",
"microsoft.aspnetcore.server.kestrel.transport.sockets",
"microsoft.aspnetcore.session",
"microsoft.aspnetcore.signalr",
"microsoft.aspnetcore.signalr.common",
"microsoft.aspnetcore.signalr.core",
"microsoft.aspnetcore.signalr.protocols.json",
"microsoft.aspnetcore.staticfiles",
"microsoft.aspnetcore.websockets",
"microsoft.aspnetcore.webutilities",
"microsoft.azure.webjobs.script",
"microsoft.azure.webjobs.script.grpc",
"microsoft.azure.webjobs.script.webhost",
"microsoft.diasymreader",
"microsoft.diasymreader.portablepdb",
"microsoft.extensions.caching.abstractions",
"microsoft.extensions.caching.memory",
"microsoft.extensions.configuration",
"microsoft.extensions.configuration.abstractions",
"microsoft.extensions.configuration.binder",
"microsoft.extensions.configuration.commandline",
"microsoft.extensions.configuration.environmentvariables",
"microsoft.extensions.configuration.fileextensions",
"microsoft.extensions.configuration.ini",
"microsoft.extensions.configuration.json",
"microsoft.extensions.configuration.keyperfile",
"microsoft.extensions.configuration.usersecrets",
"microsoft.extensions.configuration.xml",
"microsoft.extensions.dependencyinjection",
"microsoft.extensions.dependencyinjection.abstractions",
"microsoft.extensions.fileproviders.abstractions",
"microsoft.extensions.fileproviders.composite",
"microsoft.extensions.fileproviders.embedded",
"microsoft.extensions.fileproviders.physical",
"microsoft.extensions.filesystemglobbing",
"microsoft.extensions.hosting",
"microsoft.extensions.hosting.abstractions",
"microsoft.extensions.http",
"microsoft.extensions.identity.core",
"microsoft.extensions.identity.stores",
"microsoft.extensions.localization",
"microsoft.extensions.localization.abstractions",
"microsoft.extensions.logging",
"microsoft.extensions.logging.abstractions",
"microsoft.extensions.logging.configuration",
"microsoft.extensions.logging.console",
"microsoft.extensions.logging.debug",
"microsoft.extensions.logging.eventsource",
"microsoft.extensions.logging.tracesource",
"microsoft.extensions.objectpool",
"microsoft.extensions.options",
"microsoft.extensions.options.configurationextensions",
"microsoft.extensions.primitives",
"microsoft.extensions.webencoders",
"microsoft.net.http.headers",
"ncrontab",
"sos.netcore",
"system.xml.xpath.xmldocument"
]
);
let allLogs = (
All("FunctionsLogs")
| where TIMESTAMP > ago(5d)
| where SubscriptionId == subId
| where Source == "Microsoft.Azure.WebJobs.Script.ChangeAnalysis.ChangeAnalysisService"
| where Level == 5
| where HostVersion startswith "2.0" 
| extend d = parse_json(Summary)
| extend parsedApis = parse_json(d.ProblematicApis)
| project SubscriptionId, AppName, HostVersion, d.BinHash, d.AssemblyName , d.AssemblyVersion, d.AssemblyCulture, d.TargetFrameworkMoniker, d.Architecture, d.CorFlags, d.ImageVersion, d.HasCircularMetadata, d.HasNotSupportedMetadata, d.HasInvalidTokens, d.ProblematicApis, parsedApis
| where d_ProblematicApis != ""
| mv-expand parsedApis
| extend apiString = tostring(parsedApis)
| where apiString !=""
| extend assemblyNameString = tostring(d_AssemblyName)
| extend idx = indexof(apiString,":")
| extend reference = substring(apiString, 0, idx)
| extend reference = replace(" - T","",reference)
| extend reference = replace(" - M","",reference)
| extend idxErrorType = indexof(reference,"-")
| extend errorType = substring(reference, 0, idxErrorType)
| extend reference = substring(reference, idxErrorType + 2, strlen(reference))
| where reference in (referencesNotRemoved) or reference in (referencesRemovedReferencesFromSharedFx3_1)
| where reference != "newtonsoft.json" // figure out why not in v2 site extension
| extend methodRemoved = substring(apiString, idx -1, strlen(apiString))
| extend idxBracket = indexof(methodRemoved, "(")
| extend idxBracket=iff(idxBracket == -1, strlen(methodRemoved) , idxBracket)
| extend methodRemoved = substring(methodRemoved, 0, idxBracket)
| extend lastIndexOfDot = strlen(methodRemoved) - indexof(reverse(methodRemoved), reverse(".")) - strlen(".")
| extend methodRemoved = substring(methodRemoved, 0, lastIndexOfDot)
| extend methodRemoved = replace("M:","", methodRemoved)
| extend typeRemoved = substring(apiString, idx +1, strlen(apiString))
| extend typeRemoved = replace("T:","", typeRemoved)
);
// Get the list of types removed
let typesRemoved = (
allLogs
| where apiString contains "Removed - "
| where apiString contains "T:"
| summarize by typeRemoved
);
let errorsFromTypesRemoved = (
allLogs
| where apiString contains "Removed - "
| where apiString contains "T:"
//| distinct  AppName
| summarize count() by  assemblyNameString, apiString
);
errorsFromTypesRemoved 
| union 
allLogs
| where methodRemoved !in (typesRemoved)
| where typeRemoved !in (typesRemoved)
| summarize count() by  assemblyNameString, apiString
//| distinct  AppName
//| summarize count() by SubscriptionId